const dynamicContentNames="dynamic-contents-v1-beta-4",staticContentNames="static-contents-v1-beta-4",staticStyleNames="static-styles-v1-beta-4",staticScriptNames="static-scripts-v1-beta-4",staticImageNames="static-images-v1-beta-4",libStyleNames="lib-styles-v1-beta-4",libScriptNames="lib-scripts-v1-beta-4",libGoogleFontNames="lib-google-fonts-v1-beta-4",libFontAwesomeFontNames="lib-fontawesome-fonts-v1-beta-4",staticContentAssets=["/","/fallback","/about","/contact","/team","/services"],staticStyleAssets=["/css/styles.min.css","/css/bootstrap/bootstrap.min.css"],staticScriptAssets=["/js/script.min.js","/js/app.min.js","js/proper/popper.min.js","/js/bootstrap/bootstrap.min.js"],staticImageAssets=["/favicon.ico","/images/home/welcome.webp"],libStyleAssets=["https://fonts.googleapis.com/css?family=Roboto|Spectral|Timmana","https://use.fontawesome.com/releases/v5.6.1/css/all.css"],libScriptAssets=[],libGoogleFontAssets=["https://fonts.gstatic.com/s/timmana/v3/6xKvdShfL9yK-rvpOmzRKQ.woff2","https://fonts.gstatic.com/s/spectral/v5/rnCr-xNNww_2s0amA9M5kng.woff2","https://fonts.gstatic.com/s/roboto/v19/KFOmCnqEu92Fr1Mu4mxK.woff2"],libFontAwesomeFontAssets=["https://use.fontawesome.com/releases/v5.6.1/webfonts/fa-solid-900.woff2","https://use.fontawesome.com/releases/v5.6.1/webfonts/fa-brands-400.woff2"];self.addEventListener("install",t=>{console.log("service worker installed"),t.waitUntil(caches.open(staticContentNames).then(t=>{console.log("caching static staticContentNames"),t.addAll(staticContentAssets)})),t.waitUntil(caches.open(staticStyleNames).then(t=>{console.log("caching static staticStyleNames"),t.addAll(staticStyleAssets)})),t.waitUntil(caches.open(staticScriptNames).then(t=>{console.log("caching static staticScriptNames"),t.addAll(staticScriptAssets)})),t.waitUntil(caches.open(staticImageNames).then(t=>{console.log("caching static staticImageNames"),t.addAll(staticImageAssets)})),t.waitUntil(caches.open(libStyleNames).then(t=>{console.log("caching static libStyleNames"),t.addAll(libStyleAssets)})),t.waitUntil(caches.open(libScriptNames).then(t=>{console.log("caching static libScriptNames"),t.addAll(libScriptAssets)})),t.waitUntil(caches.open(libFontAwesomeFontNames).then(t=>{console.log("caching static libFontAwesomeFontNames"),t.addAll(libFontAwesomeFontAssets)})),t.waitUntil(caches.open(libGoogleFontNames).then(t=>{console.log("caching static libGoogleFontNames"),t.addAll(libGoogleFontAssets)}))}),self.addEventListener("activate",t=>{console.log("service worker activated"),t.waitUntil(caches.keys().then(t=>Promise.all(t.filter(t=>t!==staticContentNames&&t!==staticStyleNames&&t!==staticScriptNames&&t!==staticImageNames&&t!==libStyleNames&&t!==libScriptNames&&t!==libGoogleFontNames&&t!==libFontAwesomeFontNames&&t!==dynamicContentNames).map(t=>caches.delete(t)))))}),self.addEventListener("fetch",t=>{t.respondWith(caches.match(t.request).then(s=>s||fetch(t.request).then(s=>caches.open(dynamicContentNames).then(e=>(e.put(t.request.url,s.clone()),limitCacheSize(dynamicContentNames,15),s)))).catch(()=>caches.match("/fallback")))});const limitCacheSize=(t,s)=>{caches.open(t).then(e=>{e.keys().then(a=>{a.length>s&&e.delete(a[0]).then(limitCacheSize(t,s))})})};